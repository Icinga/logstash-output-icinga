:plugin: icinga
:type: output

///////////////////////////////////////////
START - GENERATED VARIABLES, DO NOT EDIT!
///////////////////////////////////////////
:version: %VERSION%
:release_date: %RELEASE_DATE%
:changelog_url: %CHANGELOG_URL%
:include_path: ../../../logstash/docs/include
///////////////////////////////////////////
END - GENERATED VARIABLES, DO NOT EDIT!
///////////////////////////////////////////

[id="plugins-{type}-{plugin}"]

=== Icinga

include::{include_path}/plugin_header.asciidoc[]

==== Description


This plugin runs actions on an Icinga server by calling its API. The Icinga API is available since version 2.4.
It replaces the formerly used command pipe by providing a similiar interface with filter capabilities. Actions are
used in order to process check results, manage downtimes, tell Icinga to send notifications and so on.

This plugin handles a defined set of actions. A list of all Icinga actions is avaiable in the
https://docs.icinga.com/icinga2/latest/doc/module/icinga2/chapter/icinga2-api#icinga2-api-actions[Icinga Docs].

Examples:

. Process a check result based on syslog severity

[source,ruby]
    filter {
      if [syslog_severity] == "error" {
        mutate {
          replace => { "exit_status" => "2" }
        }
      }
    }
    output {
      icinga {
        host           => 'demo.icinga.com'
        user           => 'icinga'
        password       => 'supersecret'
        action         => 'process-check-result'
        action_config  => {
          exit_status   => "%{exit_status}"
          plugin_output => "%{message}"
        }
        icinga_host    => "%{hostname}"
        icinga_service => "dummy"
      }
    }

. Set a downtime of 2 hours, starting from now

[source,ruby]
    filter {
      ruby { code => "event.set('start_time', Time.now.to_i)" }
      ruby { code => "event.set('end_time', Time.now.to_i + 7200)" }
    }
    output {
      icinga {
        host           => 'demo'
        user           => 'root'
        password       => 'icinga'
        ssl_verify     => false
        action         => 'schedule-downtime'
        action_config  => {
          author     => "logstash"
          comment    => "Downtime set by Logstash Output"
          start_time => "%{start_time}"
          end_time   => "%{end_time}"
        }
        icinga_host    => '%{hostname}'
        icinga_service => 'dummy'
      }


[id="plugins-{type}s-{plugin}-options"]
==== Icinga Output Configuration Options

This plugin supports the following configuration options plus the <<plugins-{type}s-common-options>> described later.

[cols="<,<,<",options="header",]
|=======================================================================
|Setting |Input type|Required
| <<plugins-{type}s-{plugin}-action>> |<<string,string>>, one of `["process-check-result", "send-custom-notification", "add-comment", "remove-comment", "schedule-downtime", "remove-downtime"]`|Yes
| <<plugins-{type}s-{plugin}-action_config>> |<<hash,hash>>|Yes
| <<plugins-{type}s-{plugin}-ca_file>> |a valid filesystem path|No
| <<plugins-{type}s-{plugin}-create_object>> |<<boolean,boolean>>|No
| <<plugins-{type}s-{plugin}-host>> |<<array,array>>|No
| <<plugins-{type}s-{plugin}-icinga_host>> |<<string,string>>|Yes
| <<plugins-{type}s-{plugin}-icinga_service>> |<<string,string>>|No
| <<plugins-{type}s-{plugin}-object_attrs>> |<<hash,hash>>|No
| <<plugins-{type}s-{plugin}-object_templates>> |<<array,array>>|No
| <<plugins-{type}s-{plugin}-password>> |<<password,password>>|Yes
| <<plugins-{type}s-{plugin}-port>> |<<number,number>>|No
| <<plugins-{type}s-{plugin}-ssl_verify>> |<<boolean,boolean>>|No
| <<plugins-{type}s-{plugin}-user>> |<<string,string>>|Yes
|=======================================================================

Also see <<plugins-{type}s-common-options>> for a list of options supported by all
output plugins.

&nbsp;

[id="plugins-{type}s-{plugin}-action"]
===== `action` 

  * This is a required setting.
  * Value can be any of: `process-check-result`, `send-custom-notification`, `add-comment`, `remove-comment`, `schedule-downtime`, `remove-downtime`
  * There is no default value for this setting.

All actions must target an `icinga_host` or an `icinga_service`.
[cols="<,<",]
|=======================================================================
|Action |Description
| <<process-check-result,process-check-result>> |Process a check result.
| <<send-custom-notification,send-custom-notification>> |Send a custom notification.
| <<add-comment,add-comment>> |Add a comment from an author.
| <<remove-comment,remove-comment>> |Remove all comments created by a certain author.
| <<schedule-downtime,schedule-downtime>> |Schedule a downtime for a host or service.
| <<remove-downtime,remove-downtime>> |Remove all downtimes created by a certain author.
|=======================================================================

[id="plugins-{type}s-{plugin}-action_config"]
===== `action_config` 

  * This is a required setting.
  * Value type is <<hash,hash>>
  * There is no default value for this setting.

Each action has its own parameters. Values of settings inside of `action_config` may include existing fields.

[source,ruby]
    icinga {
      [...]
      action        => "add-comment"
      action_config => {
        author  => "%{somefield}_logstash"
        comment => "%{message}"
      }
    }

====== `process-check-result`
[cols="<,<,<",]
|=======================================================================
|Setting |Input type|Required
| `exit_status` |<<number,number>>, For services: 0=OK, 1=WARNING, 2=CRITICAL, 3=UNKNOWN, for hosts: 0=OK, 1=CRITICAL.|Yes
| `plugin_output` |<<string,string>>, The plugins main output. Does not contain the performance data.|Yes
| `performance_data` |<<array,array>>, The performance data.|No
| `check_command` |<<array,array>>, The first entry should be the check commands path, then one entry for each command line option followed by an entry for each of its argument.|No
| `check_source` |<<string,string>>, Usually the name of the `command_endpoint`|No
|=======================================================================

====== `send-custom-notification`
[cols="<,<,<",]
|=======================================================================
|Setting |Input type|Required
| `author` |<<string,string>>, Name of the author.|Yes
| `comment` |<<string,string>>, Comment text.|Yes
| `force` |<<boolean,boolean>>, Default: `false`. If `true`, the notification is sent regardless of downtimes or whether notifications are enabled or not.|No
|=======================================================================

====== `add-comment`
[cols="<,<,<",]
|=======================================================================
|Setting |Input type|Required
| `author` |<<string,string>>, Name of the author.|Yes
| `comment` |<<string,string>>, Comment text.|Yes
|=======================================================================

====== `remove-comment`
[cols="<,<,<",]
|=======================================================================
|Setting |Input type|Required
| `author` |<<string,string>>, Name of the author.|Yes
|=======================================================================

====== `schedule-downtime`
[cols="<,<,<",]
|=======================================================================
|Setting |Input type|Required
| `author` |<<string,string>>, Name of the author.|Yes
| `comment` |<<string,string>>, Comment text.|Yes
| `start_time` |<<timestamp (epoc),timestamp (epoc)>>, Timestamp marking the beginning of the downtime.|Yes
| `end_time` |<<timestamp (epoc),timestamp (epoc)>>, Timestamp marking the end of the downtime.|Yes
| `fixed` |<<boolean,boolean>>, Defaults to `true`. If `true`, the downtime is fixed otherwise flexible.|No
| `duration` |<<number,number>>, Duration of the downtime in seconds if fixed is set to `false`.|Required for flexible downtimes
| `trigger_name` |<<string,string>>, Sets the trigger for a triggered downtime.|No
| `child_options` |<<number,number>>, Schedule child downtimes. `0` does not do anything, `1` schedules child downtimes triggered by this downtime, `2` schedules non-triggered downtimes. Defaults to `0`.|No
|=======================================================================

====== `remove-downtime`
[cols="<,<,<",]
|=======================================================================
|Setting |Input type|Required
| `author` |<<string,string>>, Name of the author.|Yes
|=======================================================================

Detailed information about each action are listed in the
https://docs.icinga.com/icinga2/latest/doc/module/icinga2/chapter/icinga2-api#icinga2-api-actions[Icinga Docs]

[id="plugins-{type}s-{plugin}-ca_file"]
===== `ca_file` 

  * Value type is <<path,path>>
  * There is no default value for this setting.

Sets absolute path of a CA certification file in PEM format. The file can contain several CA certificates.

[id="plugins-{type}s-{plugin}-create_object"]
===== `create_object` 

  * Value type is <<boolean,boolean>>
  * Default value is `false`

If the host or service does not exist, it can be created automatically by settings this parameter to 'true'. A
service can only be created if its host already exists. This limitation is necessary because we cannot decide
automatically how to handle the host based on the desired action for the service. To bypass this behaviour, you
can use the 'icinga' output multiple times in a row, where you first create the host and then the service.

[id="plugins-{type}s-{plugin}-host"]
===== `host` 

  * Value type is <<array,array>>
  * Default value is `["127.0.0.1"]`

The hostname(s) of your Icinga server. If the hosts list is an array, Logstash will send the action to the first
entry in the list. If it disconnects, the same request will be processed to the next host. An action is send to each
host in the list, until one is accepts it. If all hosts are unavailable, the action is discarded. Ports can be
specified on any hostname, which will override the global port config.

For example:
[source,ruby]
    "127.0.0.1"
    ["127.0.0.1", "127.0.0.2"]
    ["127.0.0.1:5665", "127.0.0.2"]

[id="plugins-{type}s-{plugin}-icinga_host"]
===== `icinga_host` 

  * This is a required setting.
  * Value type is <<string,string>>
  * There is no default value for this setting.

The Icinga `Host` object. This field may include existing fields.

[source,ruby]
    icinga {
      [...]
      icinga_host => "%{hostname}"
    }

[id="plugins-{type}s-{plugin}-icinga_service"]
===== `icinga_service` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

The Icinga `Service` object. This field may include existing fields.

[source,ruby]
    icinga {
      [...]
      icinga_host => "%{hostname}"
      icinga_service => "%{program}"
    }

[id="plugins-{type}s-{plugin}-object_attrs"]
===== `object_attrs` 

  * Value type is <<hash,hash>>
  * Default value is `{"vars.created_by"=>"logstash"}`

A hash of attributes for the object. The values can be existing fields.
The default is set to "'vars.created_by' => 'logstash'"

Example:

[source,ruby]
 object_attrs => {
   'vars.os' => "%{operatingsystem}"
 }

[id="plugins-{type}s-{plugin}-object_templates"]
===== `object_templates` 

  * Value type is <<array,array>>
  * Default value is `["logstash-service"]`

You should make sure to have a special template for hosts and services created by logstash. Defining a 'check_command'
is mandatory when creating hosts or services. If your template does not handle this, you neet to set the 'check_command'
in 'object_attrs'. You can set more then one templates in an array, the default is set to 'logstash-service'.

Examples for an icinga host template:

[source,c]
 template Host "logstash-host" {
   enable_passive_checks = 1
   enable_active_checks = 0
   check_command = "dummy"
 }

Example for an icinga service template:

[source,c]
 template Service "logstash-service" {
   enable_passive_checks = 1
   enable_active_checks = 0
   check_command = "dummy"
 }

[id="plugins-{type}s-{plugin}-password"]
===== `password` 

  * This is a required setting.
  * Value type is <<password,password>>
  * There is no default value for this setting.

Password of the Icinga API user

[id="plugins-{type}s-{plugin}-port"]
===== `port` 

  * Value type is <<number,number>>
  * Default value is `5665`

Global port configuration. Can be overriten on any hostname.

[id="plugins-{type}s-{plugin}-ssl_verify"]
===== `ssl_verify` 

  * Value type is <<boolean,boolean>>
  * Default value is `true`

Connecting to the Icinga API is only available through SSL encryption. Set this setting to `false` to disable SSL
verification.

[id="plugins-{type}s-{plugin}-user"]
===== `user` 

  * This is a required setting.
  * Value type is <<string,string>>
  * There is no default value for this setting.

The Icinga API user. This user must exist on your Icinga server. It is an object of the type 'ApiUser'. Make sure
this user has sufficient permissions to run the actions you configure. Learn about it in the
https://docs.icinga.com/icinga2/latest/doc/module/icinga2/chapter/object-types#objecttype-apiuser[Icinga documentation about ApiUser].



include::{include_path}/{type}.asciidoc[]
